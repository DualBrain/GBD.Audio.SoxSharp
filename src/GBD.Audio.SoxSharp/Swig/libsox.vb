Imports System.Runtime.InteropServices

' ----------------------------------------------------------------------------
' * This file was automatically generated by SWIG (http://www.swig.org).
' * Version 2.0.10
' *
' * Do not make changes to this file unless you know what you are doing--modify
' * the SWIG interface file instead.
' * ----------------------------------------------------------------------------- 

Namespace swig

    Public Class libsox
        Public Shared Function sox_version() As String
            Dim ret As String = libsoxPINVOKE.sox_version()
            Return ret
        End Function

        Public Shared Function sox_version_info() As sox_version_info_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_version_info()
            Dim ret As sox_version_info_t = If(cPtr = IntPtr.Zero, Nothing, New sox_version_info_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_get_globals() As sox_globals_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_get_globals()
            Dim ret As sox_globals_t = If(cPtr = IntPtr.Zero, Nothing, New sox_globals_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_get_encodings_info() As sox_encodings_info_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_get_encodings_info()
            Dim ret As sox_encodings_info_t = If(cPtr = IntPtr.Zero, Nothing, New sox_encodings_info_t(cPtr, False))
            Return ret
        End Function

        Public Shared Sub sox_init_encodinginfo(ByVal e As sox_encodinginfo_t)
            libsoxPINVOKE.sox_init_encodinginfo(sox_encodinginfo_t.getCPtr(e))
        End Sub

        Public Shared Function sox_precision(ByVal encoding As sox_encoding_t, ByVal bits_per_sample As UInteger) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_precision(CInt(encoding), bits_per_sample)
            Return ret
        End Function

        Public Shared Function sox_num_comments(ByVal comments As SWIGTYPE_p_p_char) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_num_comments(SWIGTYPE_p_p_char.getCPtr(comments))
            Return ret
        End Function

        Public Shared Sub sox_append_comment(ByVal comments As SWIGTYPE_p_p_p_char, ByVal item As String)
            libsoxPINVOKE.sox_append_comment(SWIGTYPE_p_p_p_char.getCPtr(comments), item)
        End Sub

        Public Shared Sub sox_append_comments(ByVal comments As SWIGTYPE_p_p_p_char, ByVal items As String)
            libsoxPINVOKE.sox_append_comments(SWIGTYPE_p_p_p_char.getCPtr(comments), items)
        End Sub

        Public Shared Function sox_copy_comments(ByVal comments As SWIGTYPE_p_p_char) As SWIGTYPE_p_p_char
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_copy_comments(SWIGTYPE_p_p_char.getCPtr(comments))
            Dim ret As SWIGTYPE_p_p_char = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_p_char(cPtr, False))
            Return ret
        End Function

        Public Shared Sub sox_delete_comments(ByVal comments As SWIGTYPE_p_p_p_char)
            libsoxPINVOKE.sox_delete_comments(SWIGTYPE_p_p_p_char.getCPtr(comments))
        End Sub

        Public Shared Function sox_find_comment(ByVal comments As SWIGTYPE_p_p_char, ByVal id As String) As String
            Dim ret As String = libsoxPINVOKE.sox_find_comment(SWIGTYPE_p_p_char.getCPtr(comments), id)
            Return ret
        End Function

        Public Shared Function sox_format_init() As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_format_init()
            Return ret
        End Function

        Public Shared Sub sox_format_quit()
            libsoxPINVOKE.sox_format_quit()
        End Sub

        Public Shared Function sox_init() As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_init()
            Return ret
        End Function

        Public Shared Function sox_quit() As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_quit()
            Return ret
        End Function

        Public Shared Function sox_get_format_fns() As sox_format_tab_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_get_format_fns()
            Dim ret As sox_format_tab_t = If(cPtr = IntPtr.Zero, Nothing, New sox_format_tab_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_open_read(ByVal path As String, ByVal signal As sox_signalinfo_t, ByVal encoding As sox_encodinginfo_t, ByVal filetype As String) As SWIGTYPE_p_sox_format_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_open_read(path, sox_signalinfo_t.getCPtr(signal), sox_encodinginfo_t.getCPtr(encoding), filetype)
            Dim ret As SWIGTYPE_p_sox_format_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_open_mem_read(ByVal buffer As SWIGTYPE_p_void, ByVal buffer_size As UInteger, ByVal signal As sox_signalinfo_t, ByVal encoding As sox_encodinginfo_t, ByVal filetype As String) As SWIGTYPE_p_sox_format_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_open_mem_read(SWIGTYPE_p_void.getCPtr(buffer), buffer_size, sox_signalinfo_t.getCPtr(signal), sox_encodinginfo_t.getCPtr(encoding), filetype)
            Dim ret As SWIGTYPE_p_sox_format_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_format_supports_encoding(ByVal path As String, ByVal filetype As String, ByVal encoding As sox_encodinginfo_t) As sox_bool
            Dim ret As sox_bool = CType(libsoxPINVOKE.sox_format_supports_encoding(path, filetype, sox_encodinginfo_t.getCPtr(encoding)), sox_bool)
            Return ret
        End Function

        Public Shared Function sox_write_handler(ByVal path As String, ByVal filetype As String, ByVal filetype1 As SWIGTYPE_p_p_char) As SWIGTYPE_p_sox_format_handler_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_write_handler(path, filetype, SWIGTYPE_p_p_char.getCPtr(filetype1))
            Dim ret As SWIGTYPE_p_sox_format_handler_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_handler_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_open_write(ByVal path As String, ByVal signal As sox_signalinfo_t, ByVal encoding As sox_encodinginfo_t, ByVal filetype As String, ByVal oob As sox_oob_t, ByVal overwrite_permitted As SWIGTYPE_p_f_p_q_const__char__sox_bool) As SWIGTYPE_p_sox_format_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_open_write(path, sox_signalinfo_t.getCPtr(signal), sox_encodinginfo_t.getCPtr(encoding), filetype, sox_oob_t.getCPtr(oob), SWIGTYPE_p_f_p_q_const__char__sox_bool.getCPtr(overwrite_permitted))
            Dim ret As SWIGTYPE_p_sox_format_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_open_mem_write(ByVal buffer As SWIGTYPE_p_void, ByVal buffer_size As UInteger, ByVal signal As sox_signalinfo_t, ByVal encoding As sox_encodinginfo_t, ByVal filetype As String, ByVal oob As sox_oob_t) As SWIGTYPE_p_sox_format_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_open_mem_write(SWIGTYPE_p_void.getCPtr(buffer), buffer_size, sox_signalinfo_t.getCPtr(signal), sox_encodinginfo_t.getCPtr(encoding), filetype, sox_oob_t.getCPtr(oob))
            Dim ret As SWIGTYPE_p_sox_format_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_open_memstream_write(ByVal buffer_ptr As SWIGTYPE_p_p_char, ByVal buffer_size_ptr As SWIGTYPE_p_size_t, ByVal signal As sox_signalinfo_t, ByVal encoding As sox_encodinginfo_t, ByVal filetype As String, ByVal oob As sox_oob_t) As SWIGTYPE_p_sox_format_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_open_memstream_write(SWIGTYPE_p_p_char.getCPtr(buffer_ptr), SWIGTYPE_p_size_t.getCPtr(buffer_size_ptr), sox_signalinfo_t.getCPtr(signal), sox_encodinginfo_t.getCPtr(encoding), filetype, sox_oob_t.getCPtr(oob))
            Dim ret As SWIGTYPE_p_sox_format_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_read(ByVal ft As SWIGTYPE_p_sox_format_t, ByVal buf As SWIGTYPE_p_int, ByVal len As UInteger) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_read(SWIGTYPE_p_sox_format_t.getCPtr(ft), SWIGTYPE_p_int.getCPtr(buf), len)
            Return ret
        End Function

        Public Shared Function sox_write(ByVal ft As SWIGTYPE_p_sox_format_t, ByVal buf As SWIGTYPE_p_int, ByVal len As UInteger) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_write(SWIGTYPE_p_sox_format_t.getCPtr(ft), SWIGTYPE_p_int.getCPtr(buf), len)
            Return ret
        End Function

        Public Shared Function sox_close(ByVal ft As SWIGTYPE_p_sox_format_t) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_close(SWIGTYPE_p_sox_format_t.getCPtr(ft))
            Return ret
        End Function

        Public Shared Function sox_seek(ByVal ft As SWIGTYPE_p_sox_format_t, ByVal offset As UInteger, ByVal whence As Integer) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_seek(SWIGTYPE_p_sox_format_t.getCPtr(ft), offset, whence)
            Return ret
        End Function

        Public Shared Function sox_find_format(ByVal name As String, ByVal ignore_devices As sox_bool) As SWIGTYPE_p_sox_format_handler_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_find_format(name, CInt(ignore_devices))
            Dim ret As SWIGTYPE_p_sox_format_handler_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_format_handler_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_get_effects_globals() As sox_effects_globals_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_get_effects_globals()
            Dim ret As sox_effects_globals_t = If(cPtr = IntPtr.Zero, Nothing, New sox_effects_globals_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_find_effect(ByVal name As String) As SWIGTYPE_p_sox_effect_handler_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_find_effect(name)
            Dim ret As SWIGTYPE_p_sox_effect_handler_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_effect_handler_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_create_effect(ByVal eh As SWIGTYPE_p_sox_effect_handler_t) As SWIGTYPE_p_sox_effect_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_create_effect(SWIGTYPE_p_sox_effect_handler_t.getCPtr(eh))
            Dim ret As SWIGTYPE_p_sox_effect_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_effect_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_effect_options(ByVal effp As SWIGTYPE_p_sox_effect_t, ByVal argc As Integer, ByVal argv As SWIGTYPE_p_p_char) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_effect_options(SWIGTYPE_p_sox_effect_t.getCPtr(effp), argc, SWIGTYPE_p_p_char.getCPtr(argv))
            Return ret
        End Function

        Public Shared Function sox_get_effect_fns() As SWIGTYPE_p_p_f_void__p_sox_effect_handler_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_get_effect_fns()
            Dim ret As SWIGTYPE_p_p_f_void__p_sox_effect_handler_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_p_f_void__p_sox_effect_handler_t(cPtr, False))
            Return ret
        End Function

        Public Shared Function sox_create_effects_chain(ByVal in_enc As sox_encodinginfo_t, ByVal out_enc As sox_encodinginfo_t) As sox_effects_chain_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_create_effects_chain(sox_encodinginfo_t.getCPtr(in_enc), sox_encodinginfo_t.getCPtr(out_enc))
            Dim ret As sox_effects_chain_t = If(cPtr = IntPtr.Zero, Nothing, New sox_effects_chain_t(cPtr, False))
            Return ret
        End Function

        Public Shared Sub sox_delete_effects_chain(ByVal ecp As sox_effects_chain_t)
            libsoxPINVOKE.sox_delete_effects_chain(sox_effects_chain_t.getCPtr(ecp))
        End Sub

        Public Shared Function sox_add_effect(ByVal chain As sox_effects_chain_t, ByVal effp As SWIGTYPE_p_sox_effect_t, ByVal arg2 As sox_signalinfo_t, ByVal arg3 As sox_signalinfo_t) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_add_effect(sox_effects_chain_t.getCPtr(chain), SWIGTYPE_p_sox_effect_t.getCPtr(effp), sox_signalinfo_t.getCPtr(arg2), sox_signalinfo_t.getCPtr(arg3))
            Return ret
        End Function

        Public Shared Function sox_flow_effects(ByVal chain As sox_effects_chain_t, ByVal callback As SWIGTYPE_p_f_enum_sox_bool_p_void__int, ByVal client_data As SWIGTYPE_p_void) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_flow_effects(sox_effects_chain_t.getCPtr(chain), SWIGTYPE_p_f_enum_sox_bool_p_void__int.getCPtr(callback), SWIGTYPE_p_void.getCPtr(client_data))
            Return ret
        End Function

        Public Shared Function sox_effects_clips(ByVal chain As sox_effects_chain_t) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_effects_clips(sox_effects_chain_t.getCPtr(chain))
            Return ret
        End Function

        Public Shared Function sox_stop_effect(ByVal effp As SWIGTYPE_p_sox_effect_t) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_stop_effect(SWIGTYPE_p_sox_effect_t.getCPtr(effp))
            Return ret
        End Function

        Public Shared Sub sox_push_effect_last(ByVal chain As sox_effects_chain_t, ByVal effp As SWIGTYPE_p_sox_effect_t)
            libsoxPINVOKE.sox_push_effect_last(sox_effects_chain_t.getCPtr(chain), SWIGTYPE_p_sox_effect_t.getCPtr(effp))
        End Sub

        Public Shared Function sox_pop_effect_last(ByVal chain As sox_effects_chain_t) As SWIGTYPE_p_sox_effect_t
            Dim cPtr As IntPtr = libsoxPINVOKE.sox_pop_effect_last(sox_effects_chain_t.getCPtr(chain))
            Dim ret As SWIGTYPE_p_sox_effect_t = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_sox_effect_t(cPtr, False))
            Return ret
        End Function

        Public Shared Sub sox_delete_effect(ByVal effp As SWIGTYPE_p_sox_effect_t)
            libsoxPINVOKE.sox_delete_effect(SWIGTYPE_p_sox_effect_t.getCPtr(effp))
        End Sub

        Public Shared Sub sox_delete_effect_last(ByVal chain As sox_effects_chain_t)
            libsoxPINVOKE.sox_delete_effect_last(sox_effects_chain_t.getCPtr(chain))
        End Sub

        Public Shared Sub sox_delete_effects(ByVal chain As sox_effects_chain_t)
            libsoxPINVOKE.sox_delete_effects(sox_effects_chain_t.getCPtr(chain))
        End Sub

        Public Shared Function sox_trim_get_start(ByVal effp As SWIGTYPE_p_sox_effect_t) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_trim_get_start(SWIGTYPE_p_sox_effect_t.getCPtr(effp))
            Return ret
        End Function

        Public Shared Sub sox_trim_clear_start(ByVal effp As SWIGTYPE_p_sox_effect_t)
            libsoxPINVOKE.sox_trim_clear_start(SWIGTYPE_p_sox_effect_t.getCPtr(effp))
        End Sub

        Public Shared Function sox_is_playlist(ByVal filename As String) As sox_bool
            Dim ret As sox_bool = CType(libsoxPINVOKE.sox_is_playlist(filename), sox_bool)
            Return ret
        End Function

        Public Shared Function sox_parse_playlist(ByVal callback As SWIGTYPE_p_f_p_void_p_q_const__char__int, ByVal p As SWIGTYPE_p_void, ByVal listname As String) As Integer
            Dim ret As Integer = libsoxPINVOKE.sox_parse_playlist(SWIGTYPE_p_f_p_void_p_q_const__char__int.getCPtr(callback), SWIGTYPE_p_void.getCPtr(p), listname)
            Return ret
        End Function

        Public Shared Function sox_strerror(ByVal sox_errno As Integer) As String
            Dim ret As String = libsoxPINVOKE.sox_strerror(sox_errno)
            Return ret
        End Function

        Public Shared Function sox_basename(ByVal base_buffer As String, ByVal base_buffer_len As UInteger, ByVal filename As String) As UInteger
            Dim ret As UInteger = libsoxPINVOKE.sox_basename(base_buffer, base_buffer_len, filename)
            Return ret
        End Function

        Public Shared Sub lsx_fail_impl(ByVal fmt As String)
            libsoxPINVOKE.lsx_fail_impl(fmt)
        End Sub

        Public Shared Sub lsx_warn_impl(ByVal fmt As String)
            libsoxPINVOKE.lsx_warn_impl(fmt)
        End Sub

        Public Shared Sub lsx_report_impl(ByVal fmt As String)
            libsoxPINVOKE.lsx_report_impl(fmt)
        End Sub

        Public Shared Sub lsx_debug_impl(ByVal fmt As String)
            libsoxPINVOKE.lsx_debug_impl(fmt)
        End Sub

        Public Shared Function lsx_find_enum_text(ByVal text As String, ByVal lsx_enum_items As lsx_enum_item, ByVal flags As Integer) As lsx_enum_item
            Dim cPtr As IntPtr = libsoxPINVOKE.lsx_find_enum_text(text, lsx_enum_item.getCPtr(lsx_enum_items), flags)
            Dim ret As lsx_enum_item = If(cPtr = IntPtr.Zero, Nothing, New lsx_enum_item(cPtr, False))
            Return ret
        End Function

        Public Shared Function lsx_find_enum_value(ByVal value As UInteger, ByVal lsx_enum_items As lsx_enum_item) As lsx_enum_item
            Dim cPtr As IntPtr = libsoxPINVOKE.lsx_find_enum_value(value, lsx_enum_item.getCPtr(lsx_enum_items))
            Dim ret As lsx_enum_item = If(cPtr = IntPtr.Zero, Nothing, New lsx_enum_item(cPtr, False))
            Return ret
        End Function

        Public Shared Function lsx_enum_option(ByVal c As Integer, ByVal arg As String, ByVal items As lsx_enum_item) As Integer
            Dim ret As Integer = libsoxPINVOKE.lsx_enum_option(c, arg, lsx_enum_item.getCPtr(items))
            Return ret
        End Function

        Public Shared Function lsx_strends(ByVal str As String, ByVal [end] As String) As sox_bool
            Dim ret As sox_bool = CType(libsoxPINVOKE.lsx_strends(str, [end]), sox_bool)
            Return ret
        End Function

        Public Shared Function lsx_find_file_extension(ByVal pathname As String) As String
            Dim ret As String = libsoxPINVOKE.lsx_find_file_extension(pathname)
            Return ret
        End Function

        Public Shared Function lsx_sigfigs3(ByVal number As Double) As String
            Dim ret As String = libsoxPINVOKE.lsx_sigfigs3(number)
            Return ret
        End Function

        Public Shared Function lsx_sigfigs3p(ByVal percentage As Double) As String
            Dim ret As String = libsoxPINVOKE.lsx_sigfigs3p(percentage)
            Return ret
        End Function

        Public Shared Function lsx_realloc(ByVal ptr As SWIGTYPE_p_void, ByVal newsize As UInteger) As SWIGTYPE_p_void
            Dim cPtr As IntPtr = libsoxPINVOKE.lsx_realloc(SWIGTYPE_p_void.getCPtr(ptr), newsize)
            Dim ret As SWIGTYPE_p_void = If(cPtr = IntPtr.Zero, Nothing, New SWIGTYPE_p_void(cPtr, False))
            Return ret
        End Function

        Public Shared Function lsx_strcasecmp(ByVal s1 As String, ByVal s2 As String) As Integer
            Dim ret As Integer = libsoxPINVOKE.lsx_strcasecmp(s1, s2)
            Return ret
        End Function

        Public Shared Function lsx_strncasecmp(ByVal s1 As String, ByVal s2 As String, ByVal n As UInteger) As Integer
            Dim ret As Integer = libsoxPINVOKE.lsx_strncasecmp(s1, s2, n)
            Return ret
        End Function

        Public Shared Sub lsx_getopt_init(ByVal argc As Integer, ByVal argv As SWIGTYPE_p_p_char, ByVal shortopts As String, ByVal longopts As lsx_option_t, ByVal flags As lsx_getopt_flags_t, ByVal first As Integer, ByVal state As lsx_getopt_t)
            libsoxPINVOKE.lsx_getopt_init(argc, SWIGTYPE_p_p_char.getCPtr(argv), shortopts, lsx_option_t.getCPtr(longopts), CInt(flags), first, lsx_getopt_t.getCPtr(state))
        End Sub

        Public Shared Function lsx_getopt(ByVal state As lsx_getopt_t) As Integer
            Dim ret As Integer = libsoxPINVOKE.lsx_getopt(lsx_getopt_t.getCPtr(state))
            Return ret
        End Function

        Public Shared ReadOnly CHAR_BIT As Integer = libsoxPINVOKE.CHAR_BIT_get()
        Public Shared ReadOnly SCHAR_MIN As Integer = libsoxPINVOKE.SCHAR_MIN_get()
        Public Shared ReadOnly SCHAR_MAX As Integer = libsoxPINVOKE.SCHAR_MAX_get()
        Public Shared ReadOnly UCHAR_MAX As Integer = libsoxPINVOKE.UCHAR_MAX_get()
        Public Shared ReadOnly CHAR_MIN As Integer = libsoxPINVOKE.CHAR_MIN_get()
        Public Shared ReadOnly CHAR_MAX As Integer = libsoxPINVOKE.CHAR_MAX_get()
        Public Shared ReadOnly MB_LEN_MAX As Integer = libsoxPINVOKE.MB_LEN_MAX_get()
        Public Shared ReadOnly SHRT_MIN As Integer = libsoxPINVOKE.SHRT_MIN_get()
        Public Shared ReadOnly SHRT_MAX As Integer = libsoxPINVOKE.SHRT_MAX_get()
        Public Shared ReadOnly USHRT_MAX As Integer = libsoxPINVOKE.USHRT_MAX_get()
        Public Shared ReadOnly INT_MIN As Integer = libsoxPINVOKE.INT_MIN_get()
        Public Shared ReadOnly INT_MAX As Integer = libsoxPINVOKE.INT_MAX_get()
        Public Shared ReadOnly UINT_MAX As Integer = libsoxPINVOKE.UINT_MAX_get()
        Public Shared ReadOnly LONG_MIN As Integer = libsoxPINVOKE.LONG_MIN_get()
        Public Shared ReadOnly LONG_MAX As Integer = libsoxPINVOKE.LONG_MAX_get()
        Public Shared ReadOnly ULONG_MAX As UInteger = libsoxPINVOKE.ULONG_MAX_get()
        Public Shared ReadOnly SIZE_MAX As Integer = libsoxPINVOKE.SIZE_MAX_get()
        Public Shared ReadOnly lsx_static_assert_sox_int8_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_int8_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_uint8_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_uint8_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_int16_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_int16_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_uint16_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_uint16_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_int32_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_int32_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_uint32_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_uint32_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_int64_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_int64_size_get()

        Public Shared ReadOnly lsx_static_assert_sox_uint64_size As Integer = libsoxPINVOKE.lsx_static_assert_sox_uint64_size_get()

        Public Shared ReadOnly SOX_LIB_VERSION_CODE As Integer = libsoxPINVOKE.SOX_LIB_VERSION_CODE_get()
        Public Shared ReadOnly SOX_SAMPLE_PRECISION As Integer = libsoxPINVOKE.SOX_SAMPLE_PRECISION_get()
        Public Shared ReadOnly SOX_SAMPLE_NEG As Integer = libsoxPINVOKE.SOX_SAMPLE_NEG_get()
        Public Shared ReadOnly SOX_UNSPEC As Integer = libsoxPINVOKE.SOX_UNSPEC_get()
        Public Shared ReadOnly SOX_DEFAULT_CHANNELS As Integer = libsoxPINVOKE.SOX_DEFAULT_CHANNELS_get()
        Public Shared ReadOnly SOX_DEFAULT_RATE As Integer = libsoxPINVOKE.SOX_DEFAULT_RATE_get()
        Public Shared ReadOnly SOX_DEFAULT_PRECISION As Integer = libsoxPINVOKE.SOX_DEFAULT_PRECISION_get()
        Public Shared ReadOnly SOX_MAX_NLOOPS As Integer = libsoxPINVOKE.SOX_MAX_NLOOPS_get()
        Public Shared ReadOnly SOX_FILE_NOSTDIO As Integer = libsoxPINVOKE.SOX_FILE_NOSTDIO_get()
        Public Shared ReadOnly SOX_FILE_DEVICE As Integer = libsoxPINVOKE.SOX_FILE_DEVICE_get()
        Public Shared ReadOnly SOX_FILE_PHONY As Integer = libsoxPINVOKE.SOX_FILE_PHONY_get()
        Public Shared ReadOnly SOX_FILE_REWIND As Integer = libsoxPINVOKE.SOX_FILE_REWIND_get()
        Public Shared ReadOnly SOX_FILE_BIT_REV As Integer = libsoxPINVOKE.SOX_FILE_BIT_REV_get()
        Public Shared ReadOnly SOX_FILE_NIB_REV As Integer = libsoxPINVOKE.SOX_FILE_NIB_REV_get()
        Public Shared ReadOnly SOX_FILE_ENDIAN As Integer = libsoxPINVOKE.SOX_FILE_ENDIAN_get()
        Public Shared ReadOnly SOX_FILE_ENDBIG As Integer = libsoxPINVOKE.SOX_FILE_ENDBIG_get()
        Public Shared ReadOnly SOX_FILE_MONO As Integer = libsoxPINVOKE.SOX_FILE_MONO_get()
        Public Shared ReadOnly SOX_FILE_STEREO As Integer = libsoxPINVOKE.SOX_FILE_STEREO_get()
        Public Shared ReadOnly SOX_FILE_QUAD As Integer = libsoxPINVOKE.SOX_FILE_QUAD_get()
        Public Shared ReadOnly SOX_FILE_CHANS As Integer = libsoxPINVOKE.SOX_FILE_CHANS_get()
        Public Shared ReadOnly SOX_FILE_LIT_END As Integer = libsoxPINVOKE.SOX_FILE_LIT_END_get()
        Public Shared ReadOnly SOX_FILE_BIG_END As Integer = libsoxPINVOKE.SOX_FILE_BIG_END_get()
        Public Shared ReadOnly SOX_EFF_CHAN As Integer = libsoxPINVOKE.SOX_EFF_CHAN_get()
        Public Shared ReadOnly SOX_EFF_RATE As Integer = libsoxPINVOKE.SOX_EFF_RATE_get()
        Public Shared ReadOnly SOX_EFF_PREC As Integer = libsoxPINVOKE.SOX_EFF_PREC_get()
        Public Shared ReadOnly SOX_EFF_LENGTH As Integer = libsoxPINVOKE.SOX_EFF_LENGTH_get()
        Public Shared ReadOnly SOX_EFF_MCHAN As Integer = libsoxPINVOKE.SOX_EFF_MCHAN_get()
        Public Shared ReadOnly SOX_EFF_NULL As Integer = libsoxPINVOKE.SOX_EFF_NULL_get()
        Public Shared ReadOnly SOX_EFF_DEPRECATED As Integer = libsoxPINVOKE.SOX_EFF_DEPRECATED_get()
        Public Shared ReadOnly SOX_EFF_GAIN As Integer = libsoxPINVOKE.SOX_EFF_GAIN_get()
        Public Shared ReadOnly SOX_EFF_MODIFY As Integer = libsoxPINVOKE.SOX_EFF_MODIFY_get()
        Public Shared ReadOnly SOX_EFF_ALPHA As Integer = libsoxPINVOKE.SOX_EFF_ALPHA_get()
        Public Shared ReadOnly SOX_EFF_INTERNAL As Integer = libsoxPINVOKE.SOX_EFF_INTERNAL_get()
        Public Shared ReadOnly SOX_SEEK_SET As Integer = libsoxPINVOKE.SOX_SEEK_SET_get()
        Public Shared ReadOnly lsx_find_enum_item_none As Integer = libsoxPINVOKE.lsx_find_enum_item_none_get()
        Public Shared ReadOnly lsx_find_enum_item_case_sensitive As Integer = libsoxPINVOKE.lsx_find_enum_item_case_sensitive_get()

    End Class

End Namespace
